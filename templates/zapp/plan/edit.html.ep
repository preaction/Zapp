<%
    use Mojo::Loader qw( data_section );
    use Zapp::Util qw(
        get_path_from_data prefix_field rename_field
        parse_zapp_attrs
    );
    layout 'zapp';
    my $plan = stash( 'plan' ) // {};
%>

<style>
/********************************
 * Auto-grow textarea from https://css-tricks.com/the-cleanest-trick-for-autogrowing-textareas/
 * Markup:
 * <div class="grow-wrap">
 *   <textarea name="text" id="text" onInput="this.parentNode.dataset.replicatedValue = this.value"></textarea>
 * </div>
 */
.grow-wrap {
  /* easy way to plop the elements on top of each other and have them both sized based on the tallest one's height */
  display: grid;
}
.grow-wrap::after {
  /* Note the weird space! Needed to preventy jumpy behavior */
  content: attr(data-replicated-value) " ";

  /* This is how textarea text behaves */
  white-space: pre-wrap;

  /* Hidden from view, clicks, and screen readers */
  visibility: hidden;
}
.grow-wrap > textarea {
  /* You could leave this, but after a user resizes, then it ruins the auto sizing */
  resize: none;

  /* Firefox shows scrollbar on growth, you can hide like this. */
  overflow: hidden;
}
.grow-wrap > textarea,
.grow-wrap::after {
  /* Identical styling required!! */
  border: 1px solid black;
  padding: 0.5rem;
  font: inherit;

  /* Place on top of each other */
  grid-area: 1 / 1 / 2 / 2;
}

/**************************************************************************************
 * Zapp form classes for use by task arg forms
 */
[data-zapp-if] {
    display: none;
}
[data-zapp-if].zapp-visible {
    display: block;
}

</style>

%# Form for a single test
% my $test_tmpl = begin
    % my ( $i, $test ) = @_;
    <div class="form-row test-form">
        <input type="hidden" name="tests[<%= $i %>].test_id" value="<%= $test->{test_id} // '' %>" />
        <div class="col">
            <label for="tests[<%= $i %>].expr">Expression</label>
            <input type="text" name="tests[<%= $i %>].expr" value="<%= $test->{expr} %>" class="form-control">
        </div>
        <div class="col-auto align-self-end">
            <select name="tests[<%= $i %>].op" class="form-control">
                <option value="==" <%= $test->{op} eq '==' ? 'selected' : '' %>>==</option>
                <option value="!=" <%= $test->{op} eq '!=' ? 'selected' : '' %>>!=</option>
                <option value="&gt;" <%= $test->{op} eq '>' ? 'selected' : '' %>>&gt;</option>
                <option value="&lt;" <%= $test->{op} eq '<' ? 'selected' : '' %>>&lt;</option>
            </select>
        </div>
        <div class="col">
            <label for="tests[<%= $i %>].value">Value</label>
            <input type="text" name="tests[<%= $i %>].value" value="<%= $test->{value} %>" class="form-control">
        </div>
        <div class="col-auto align-self-end">
            <button type="button" class="test-remove btn btn-outline-danger"
                aria-label="Delete test"
            >
                <i class="fa fa-times-circle"></i>
            </button>
        </div>
    </div>
% end

%# Form for saving output
% my $output_tmpl = begin
    % my ( $i, $output ) = @_;
    <div class="form-row output-form">
        <div class="col">
            <label for="output[<%= $i %>].name">Name</label>
            <input type="text" name="output[<%= $i %>].name" value="<%= $output->{name} %>" class="form-control">
        </div>
        <div class="col-auto align-self-end">
            <span class="form-control-plaintext">=</span>
        </div>
        <div class="col">
            <label for="output[<%= $i %>].expr">Expression</label>
            <input type="text" name="output[<%= $i %>].expr" value="<%= $output->{expr} %>" class="form-control">
        </div>
        <div class="col-auto align-self-end">
            <button type="button" class="output-remove btn btn-outline-danger"
                aria-label="Delete output"
            >
                <i class="fa fa-times-circle"></i>
            </button>
        </div>
    </div>
% end

%# The form for the main task fields
% my $task_tmpl = begin
    % my $task = shift;
    <div class="task-form bg-light border border-secondary rounded p-3 mt-3 shadow">
        <input type="hidden" name="task_id" value="<%= $task->{task_id} // '' %>" />
        <input type="hidden" name="class" value="<%= $task->{class} %>" />
        <header class="form-row align-items-center justify-content-between">
            <h3 class="col-auto" data-task-type>
                <%= ( $task->{class} // '' ) =~ s/^Zapp::Task:://r %>
            </h3>
            <div class="col-auto align-self-start btn-toolbar" role="toolbar">
                <div class="btn-group btn-group-sm mr-2" role="group" aria-label="Move Task">
                    <button type="button" class="btn btn-sm btn-outline-secondary task-move-up" aria-label="Move Task Up">
                        <i class="fa fa-chevron-up"></i>
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-secondary task-move-down" aria-label="Move Task Down">
                        <i class="fa fa-chevron-down"></i>
                    </button>
                </div>
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-sm btn-outline-danger task-remove" aria-label="Remove task">
                        <i class="fa fa-times-circle"></i>
                    </button>
                </div>
            </div>
        </header>
        <div class="form-group">
            <label class="mb-1" for="name">Task Name</label>
            %= text_field "name", $task->{name}, placeholder => 'Task Name', class => 'form-control'
        </div>
        <div class="form-group">
            <label for="description">Task Description</label>
            <div class="grow-wrap">
                <%= text_area "description", $task->{description}, class => 'form-control',
                    oninput => 'this.parentNode.dataset.replicatedValue = this.value',
                    placeholder => 'Task description',
                %>
            </div>
        </div>

        <div class="d-flex my-2 task-tabs">
            <ul class="col-auto flex-column nav nav-pills task-tabs-nav" role="tablist">
                <li class="nav-item">
                    <a class="input-tab nav-link active" href="#">Input</a>
                </li>
                <li class="nav-item">
                    <a class="tests-tab nav-link d-flex justify-content-between align-items-center" href="#">
                        <span>Tests</span>
                        <span data-test-count class="ml-2 border border-dark badge badge-light"><%= scalar @{$task->{tests}} %></span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="output-tab nav-link d-flex justify-content-between align-items-center" href="#">
                        <span>Output</span>
                        <span data-output-count class="ml-2 border border-dark badge badge-light"><%= scalar @{$task->{output}} %></span>
                    </a>
                </li>
            </ul>

            <div class="col tab-content task-tabs-content">
                <section class="tab-pane show active all-input">
                    <div data-input-form></div>
                </section>

                <section class="tab-pane all-tests">
                    <ul class="tests list-unstyled">
                    % for my $i ( 0 .. $#{$task->{tests}} ) {
                        <li><%= $test_tmpl->( $i, $task->{tests}[ $i ] ) %></li>
                    % }
                    </ul>
                    <button class="test-add btn btn-secondary" type="button">
                        <i class="fa fa-plus"></i> Add Test
                    </button>
                </section>

                <section class="tab-pane all-output">
                    <ul class="output list-unstyled">
                    % for my $i ( 0 .. $#{$task->{output}} ) {
                        <li><%= $output_tmpl->( $i, $task->{output}[ $i ] ) %></li>
                    % }
                    </ul>
                    <button class="output-add btn btn-secondary" type="button">
                        <i class="fa fa-plus"></i> Add Output
                    </button>
                </section>
            </div>
        </div>

    </div>
% end

%# The form for plan inputs
% my $input_tmpl = begin
    % my ( $input_num, $input ) = @_;

    <div class="input-form bg-light border border-secondary rounded p-3 mt-3 shadow">
        <div class="form-row">
            <div class="col-auto">
                <label for="input[<%= $input_num %>].name">Name</label>
                %= text_field "input[$input_num].name", $input->{name}, placeholder => 'Name', class => 'form-control'
            </div>
            <div class="col-auto">
                <!-- Type is hidden so that in the future we can have different
                    input elements for different types. That is much easier if we do not
                    have to be able to mutate the form (though, [data-zapp-if] could
                    solve that problem...) -->
                %= hidden_field "input[$input_num].type", $input->{type}
                <label>Type</label>
                <span class="input-type form-control-plaintext"><%= $input->{type} %></span>
            </div>
            <div class="col">
                <label for="input[<%= $input_num %>].default_value">Default Value</label>
                <div>
                    <% if ( my $type_name = $input->{type} ) {
                        my $type = $c->zapp->types->{ $type_name }
                            or die qq{Could not find type "$type_name"};
                        my $input_field = include inline => $type->input_field( $c, $input->{default_value} ), self => $type, input => $input;
                        my $input_dom = rename_field( $input_field, value => 'default_value' );
                        $input_dom = prefix_field( $input_dom, "input[$input_num]" );
                        %><%== $input_dom %><%
                    } else {
                        %><span data-input-value></span><%
                    } %>
                </div>
            </div>
            <div class="col-auto align-self-end">
                <button type="button" class="delete input-remove btn btn-outline-danger"
                    aria-label="Delete input"
                >
                    <i class="fa fa-times-circle"></i>
                </button>
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <label for="input[<%= $input_num %>].description">Description</label>
                <div class="grow-wrap">
                    <!-- XXX: support markdown -->
                    <%= text_area "input[$input_num].description", $input->{description},
                        oninput => 'this.parentNode.dataset.replicatedValue = this.value',
                        placeholder => 'Input description',
                    %>
                </div>
            </div>
        </div>
    </div>
% end

<template id="task-form">
    %= $task_tmpl->( {} )
</template>
<template id="test-form">
    %= $test_tmpl->( 0, { op => '=='} )
</template>
<template id="output-form">
    %= $output_tmpl->( 0, {} )
</template>
<template id="input-form">
    %= $input_tmpl->( 0, {} )
</template>

% for my $class ( @{ stash 'tasks' } ) {
    <template data-task-class="<%= $class %>">
        %= include inline => data_section( $class, 'input.html.ep' )
    </template>
% }
% for my $type_name ( keys $c->zapp->types->%* ) {
    % my $type = $c->zapp->types->{ $type_name };
    <template data-type-input="<%= $type_name %>">
        %= include inline => $type->input_field( $c ), input => {}, self => $type
    </template>
% }

%= form_for 'zapp.save_plan', id => 'plan', begin
    <header class="form-row align-items-center">
        <h1 class="col-auto">Edit Plan</h1>
        %= link_to 'zapp.list_plans', class => 'btn btn-secondary', begin
            <i class="fa fa-arrow-left"></i> Back to Plans
        % end
    </header>
    % if ( my $errors = stash 'errors' ) {
        <div class="alert alert-danger">
            There are some errors in your plan.
            <ul>
                % for my $error ( @$errors ) {
                <li><%== $error->{error} %></li>
                % }
            </ul>
        </div>
    % }
    <div class="form-group">
        <label class="mb-1" for="name">Plan Name</label>
        <input id="name" class="form-control" name="name" type="text" placeholder="Plan Name" value="<%= $plan->{name} %>">
        <!-- XXX: Add folders to organize plans -->
    </div>
    <div class="form-group">
        <label for="description">Plan Description</label>
        <div class="grow-wrap">
            <%= text_area "description", $plan->{description}, id => 'description', class => 'form-control',
                oninput => 'this.parentNode.dataset.replicatedValue = this.value',
                placeholder => 'Plan description',
            %>
        </div>
    </div>

    <div class="input-container my-2">
        <h2>Input</h2>
        <ul id="all-inputs" class="list-unstyled">
            % for my $input_num ( 0 .. $#{ $plan->{inputs} } ) {
                % my $input = $plan->{inputs}[ $input_num ];
                <li>
                    %= $input_tmpl->( $input_num, { %$input, value => $input->{default_value} } )
                </li>
            % }
        </ul>
        <select class="add-input form-control col-auto">
            <option>Add Input...</option>
            % for my $type_name ( keys $c->zapp->types->%* ) {
                %= tag option => ( value => $type_name ), ucfirst $type_name
            % }
        </select>
    </div>

    <div class="task-container my-2">
        <h2>Tasks</h2>
        <div id="all-tasks">
            <% for my $task_num ( 0 .. $#{ $plan->{tasks} } ) { %>
                <section data-task-form class="task"><%
                    my $task = $plan->{tasks}[ $task_num ];
                    my $input_form = include inline => data_section( $task->{class}, 'input.html.ep' ), input => $task->{input};
                    my $input_dom = Mojo::DOM->new( $input_form );
                    $input_dom = parse_zapp_attrs( $input_dom, $task->{input} );
                    $input_dom = prefix_field( $input_dom, 'input' );

                    my $task_form = $task_tmpl->( $task );
                    my $task_dom = Mojo::DOM->new( $task_form );
                    $task_dom->at( '[data-input-form]' )->replace( $input_dom );
                    $task_dom = prefix_field( $task_dom, "task[$task_num]" );
                    if ( $task_num == 0 ) {
                        my $btn = $task_dom->at( '.task-move-up' );
                        $btn->attr( class => join ' ', $btn->attr( 'class' ), 'disabled' );
                    }
                    if ( $task_num == $#{ $plan->{tasks} } ) {
                        my $btn = $task_dom->at( '.task-move-down' );
                        $btn->attr( class => join ' ', $btn->attr( 'class' ), 'disabled' );
                    }
                    %><%== $task_dom %></section><%
            } %>
        </div>

        <div class="my-3">
            <select class="add-task form-control">
                <option>Add Task...</option>
                % for my $class ( @{ stash 'tasks' } ) {
                    %= tag option => ( value => $class ), $class =~ s/Zapp::Task:://r
                % }
            </select>
        </div>
    </div>

    <button name="save-plan" class="btn btn-primary">Save Plan</button>
% end

%= javascript begin
function delegateEvent( eventName, elementSelector, handler ) {
    document.addEventListener(eventName, function(e) {
        for (var target = e.target; target && target != this; target = target.parentNode) {
            if (target.matches(elementSelector)) {
                handler.call(target, e);
                break;
            }
        }
    }, false);
}

function prefixField( el, prefix ) {
    var inputs = el.querySelectorAll( 'input,select,textarea' );
    inputs.forEach( function ( el ) {
        var sep = el.name.startsWith( '[' ) ? '' : '.';
        el.name = `${prefix}${sep}${el.name}`;
        el.id = el.name;
    } );

    var labels = el.querySelectorAll( 'label' );
    labels.forEach( function ( el ) {
        var sep = el.attributes.for.value.startsWith( '[' ) ? '' : '.';
        el.attributes.for.value = `${prefix}${sep}${el.attributes.for.value}`;
    } );

    return el;
}

function addTask( event ) {
    // XXX: Focus on task name element after adding form
    var inputSelector = 'input,select,textarea',
        sel = event.target,
        opt = sel.options[ sel.selectedIndex ],
        type = opt.innerText,
        cls = opt.value,
        allTasks = document.querySelector( '#all-tasks' ),
        beforeTask = sel.closest( '[data-task-form]' ),
        taskIdx = beforeTask ? allTasks.indexOf( beforeTask ) : allTasks.childElementCount,
        taskTmpl = document.querySelector( 'template#task-form' ).content.cloneNode(true),
        taskForm = document.createElement( 'div' ),
        inputTmpl = document.querySelector( `[data-task-class="${cls}"]` ).content,
        inputForm = inputTmpl.cloneNode(true);
    sel.selectedIndex = 0;

    prefixField( inputForm, 'input' );
    taskForm.dataset.taskForm = true;
    taskForm.appendChild( taskTmpl );
    taskForm.querySelector( '[data-input-form]' ).replaceWith( inputForm );
    var taskType = taskForm.querySelector( '[data-task-type]' );
    taskType.innerHTML = type;
    var taskClassInput = taskForm.querySelector( 'input[name=class]' );
    taskClassInput.value = cls;
    prefixField( taskForm, `task[${taskIdx}]` );

    if ( beforeTask ) {
        beforeTask.insertAdjacentElement( 'beforebegin', taskForm );
        // XXX: Re-index all subsequent tasks
    }
    else {
        allTasks.appendChild( taskForm );
    }

    taskForm.scrollIntoView({block: "start", inline: "nearest"});
}

function removeTask( event ) {
    var button = event.target,
        task = button.closest( '[data-task-form]' ),
        allTasks = document.getElementById( 'all-tasks' );
    allTasks.removeChild( task );
    reindexTasks();
}

// Reindex all tasks
function reindexTasks() {
    var allTasks = document.getElementById( 'all-tasks' );
    allTasks.querySelectorAll( '[data-task-form]' ).forEach( function ( taskForm, i ) {
        var taskInputs = taskForm.querySelectorAll( 'input,select,textarea' );
        taskInputs.forEach( function ( el ) {
            el.name = el.name.replace( /^task\[\d+\]/, `task[${i}]` );
            el.id = el.name;
        } );
        var taskLabels = taskForm.querySelectorAll( 'label' );
        taskLabels.forEach( function ( el ) {
            el.attributes.for.value = el.attributes.for.value.replace( /^task\[\d+\]/, `task[${i}]` );
        } );

        if ( i == 0 ) {
            taskForm.querySelector( '.task-move-up' ).classList.add( 'disabled' );
        }
        else {
            taskForm.querySelector( '.task-move-up' ).classList.remove( 'disabled' );
        }
        if ( i == allTasks.children.length - 1 ) {
            taskForm.querySelector( '.task-move-down' ).classList.add( 'disabled' );
        }
        else {
            taskForm.querySelector( '.task-move-down' ).classList.remove( 'disabled' );
        }
    } );
}

function moveTaskUp( event ) {
    var button = event.target,
        task = button.closest( '[data-task-form]' ),
        prevTask = task.previousElementSibling;
    if ( !prevTask ) {
        return;
    }
    prevTask.insertAdjacentElement( 'beforebegin', task );
    reindexTasks();
    task.scrollIntoView({block: "start", inline: "nearest"});
}

function moveTaskDown( event ) {
    var button = event.target,
        task = button.closest( '[data-task-form]' ),
        nextTask = task.nextElementSibling;
    if ( !nextTask ) {
        return;
    }
    nextTask.insertAdjacentElement( 'afterend', task );
    reindexTasks();
    task.scrollIntoView({block: "start", inline: "nearest"});
}

function addTest( event ) {
    // Clone the blank row from the template
    var button = event.target,
        list = button.previousElementSibling,
        task = button.closest( '.task-form' ),
        newTest = document.querySelector( 'template#test-form' ).content.cloneNode(true),
        newIndex = list.querySelectorAll('li').length,
        // Find an input so we can see which task we're in
        nameAttr = task.querySelector( 'input' ).attributes.getNamedItem( 'name' ).value,
        taskIndex = nameAttr.substring( nameAttr.indexOf('[') + 1, nameAttr.indexOf(']') );

    // Reset expr, op, value
    newTest.querySelectorAll( 'input,select' ).forEach( function (el) {
        if ( el.tagName == 'SELECT' ) {
            el.selectedIndex = 0;
        }
        else {
            el.value = '';
        }
        el.name = el.name.replace( /tests\[\d+\]/, 'task[' + taskIndex + '].tests[' + newIndex + ']' );
        el.id = el.name;
    } );
    // XXX: Labels

    // Append
    var newRow = document.createElement( 'li' );
    newRow.appendChild( newTest );
    list.appendChild( newRow );

    // Increment test count
    var testCount = task.querySelector( '[data-test-count]' );
    var count = parseInt( testCount.innerHTML );
    count++;
    testCount.innerHTML = count;

    // Focus test expression field
    newRow.querySelector( '[name$="expr"]' ).focus();
}

function removeTest( event ) {
    var button = event.target,
        task = button.closest( '.task-form' ),
        row = button.closest( '.test-form' ).parentNode,
        list = row.parentElement;

    row.parentNode.removeChild( row );
    // Reset indexes in remaining test rows
    list.querySelectorAll( 'li' ).forEach( function (row, i) {
        row.querySelectorAll( 'input,select' ).forEach( function (el) {
            el.name = el.name.replace( /tests\[\d+\]/, 'tests[' + i + ']' );
            el.id = el.name;
        });
        // XXX: Labels
    } );

    // Decrement test count
    var testCount = task.querySelector( '[data-test-count]' );
    var count = parseInt( testCount.innerHTML );
    count--;
    testCount.innerHTML = count;
}

function addOutput( event ) {
    // Clone the blank row from the template
    var button = event.target,
        list = button.previousElementSibling,
        task = button.closest( '.task-form' ),
        newOutput = document.querySelector( 'template#output-form' ).content.cloneNode(true),
        newIndex = list.querySelectorAll('li').length,
        // Find an input so we can see which task we're in
        nameAttr = task.querySelector( 'input' ).attributes.getNamedItem( 'name' ).value,
        taskIndex = nameAttr.substring( nameAttr.indexOf('[') + 1, nameAttr.indexOf(']') );

    // Reset expr, op, value
    newOutput.querySelectorAll( 'input,select' ).forEach( function (el) {
        if ( el.tagName == 'SELECT' ) {
            el.selectedIndex = 0;
        }
        else {
            el.value = '';
        }
        el.name = el.name.replace( /output\[\d+\]/, 'task[' + taskIndex + '].output[' + newIndex + ']' );
        el.id = el.name;
    } );
    // XXX: Labels

    // Append
    var newRow = document.createElement( 'li' );
    newRow.appendChild( newOutput );
    list.appendChild( newRow );

    // Increment output count
    var outputCount = task.querySelector( '[data-output-count]' );
    var count = parseInt( outputCount.innerHTML );
    count++;
    outputCount.innerHTML = count;

    // Focus output name field
    newRow.querySelector( '[name$="name"]' ).focus();
}

function removeOutput( event ) {
    var button = event.target,
        task = button.closest( '.task-form' ),
        row = button.closest( '.output-form' ).parentNode,
        list = row.parentElement;

    row.parentNode.removeChild( row );
    // Reset indexes in remaining test rows
    list.querySelectorAll( 'li' ).forEach( function (row, i) {
        row.querySelectorAll( 'input,select' ).forEach( function (el) {
            el.name = el.name.replace( /output\[\d+\]/, 'output[' + i + ']' );
            el.id = el.name;
        });
        // XXX: Labels
    } );

    // Decrement output count
    var outputCount = task.querySelector( '[data-output-count]' );
    var count = parseInt( outputCount.innerHTML );
    count--;
    outputCount.innerHTML = count;
}

function addInput( event ) {
    // Clone the blank row from the template
    var select = event.target,
        inputType = select.options[ select.selectedIndex ].value,
        list = select.previousElementSibling,
        input = select.parentNode,
        newInput = document.querySelector( 'template#input-form' ).content.cloneNode(true),
        newIndex = list.querySelectorAll('li').length,
        valueTmpl = document.querySelector( `[data-type-input="${inputType}"]` ).content,
        valueForm = valueTmpl.cloneNode(true);
        ;

    valueForm.querySelectorAll( 'input,select,textarea' ).forEach(
        function( el ) {
            el.name = el.name.replace( /^value/, 'default_value' );
        }
    );
    valueForm.querySelectorAll( 'label' ).forEach(
        function( el ) {
            el.for = el.for.replace( /^value/, 'default_value' );
        }
    );
    prefixField( valueForm, 'input[0]' );
    newInput.querySelector( '[data-input-value]' ).replaceWith( valueForm );

    // Set type
    newInput.querySelector( '[name="input[0].type"]' ).attributes.getNamedItem( 'value' ).value = inputType;
    newInput.querySelector( '.input-type' ).innerHTML = inputType;

    // Fix indexes
    newInput.querySelectorAll( 'input,select,textarea' ).forEach( function (el) {
        el.name = el.name.replace( /input\[\d+\]/, 'input[' + newIndex + ']' );
        el.id = el.name;
    } );

    // Append
    var newRow = document.createElement( 'li' );
    newRow.appendChild( newInput );
    list.appendChild( newRow );

    select.selectedIndex = 0;
    // XXX: Focus input name field
}

function removeInput( event ) {
    event.preventDefault();
    var button = event.target,
        row = button.closest( '.input-form' ).parentElement,
        list = row.parentElement;

    row.parentNode.removeChild( row );
    // Reset indexes in remaining test rows
    list.querySelectorAll( 'li' ).forEach( function (row, i) {
        row.querySelectorAll( 'input,select,textarea' ).forEach( function (el) {
            el.name = el.name.replace( /input\[\d+\]/, 'input[' + i + ']' );
            el.id = el.name;
        });
    } );
}

function checkZappExpressions( event ) {
    var match = event.target.name.match( /^task\[\d+\]\.input\./ );
    if ( !match ) return;
    var task = event.target.closest( '[data-task-form]' ),
        input = {};
    task.querySelectorAll( '[name^="' + match[0] + '"]').forEach( function ( el ) {
        var name = el.name, key = name.replace( match[0], '' );
        input[ key ] = el.value;
    } );

    // Find all data-zapp-if
    task.querySelectorAll( '[data-zapp-if]' ).forEach( function ( el ) {
        var expr = el.dataset.zappIf,
            exprMatch = expr.match( /\s*(.+?)\s*(==|!=|>|<|>=|<=|eq|ne|gt|lt|ge|le)\s*(.+)/ );
        if ( exprMatch ) {
            var lhs = exprMatch[1],
                op = exprMatch[2],
                rhs = exprMatch[3];

            if ( lhs.match( /^['"]/ ) ) {
                lhs = lhs.substring( 1, lhs.length-1 );
            }
            else if ( !lhs.match( /^\d/ ) ) {
                lhs = input[ lhs ];
            }

            if ( rhs.match( /^['"]/ ) ) {
                rhs = rhs.substring( 1, rhs.length-1 );
            }
            else if ( !rhs.match( /^\d/ ) ) {
                rhs = input[ rhs ];
            }

            var opFunc = {},
                ops = [
                    '==', '!=', '>', '<', '>=', '<=',
                    'eq', 'ne', 'gt', 'lt', 'ge', 'le'
                ],
                opMap = {
                    eq: '==', ne: '!=',
                    gt: '>', lt: '<',
                    ge: '>=', le: '<='
                };
            ops.forEach( function ( op ) {
                eval( "opFunc[ op ] = function ( lhs, rhs ) { return lhs " + ( opMap[op] || op ) + " rhs; }" );
            } );
            if ( opFunc[ op ] && opFunc[ op ]( lhs, rhs ) ) {
                el.classList.add( 'zapp-visible' );
            }
            else {
                el.classList.remove( 'zapp-visible' );
            }
        }
        else {
            // Look for leading !
            var invert = expr.match( /^!/ );
            if ( invert ) {
                expr = expr.replace( /^!/, '' );
            }
            // Find arg value and check for booleans
            if ( ( !invert && input[ expr ] ) || ( invert && !input[ expr ] ) ) {
                el.classList.add( 'zapp-visible' );
            }
            else {
                el.classList.remove( 'zapp-visible' );
            }
        }
    });

}

function changeTaskTab( event ) {
    event.preventDefault();
    var tabNavItem = event.target,
        tabNavListItem = tabNavItem.closest( 'li' ),
        tabContainer = tabNavItem.closest( '.task-tabs' ),
        tabNav = tabContainer.querySelector( '.task-tabs-nav' ),
        tabIndex = Array.prototype.indexOf.call( tabNav.childNodes, tabNavListItem ),
        tabPaneContainer = tabContainer.querySelector( '.task-tabs-content' );
    tabNav.querySelectorAll( '.task-tabs-nav .active' ).forEach( function (el) {
        el.classList.remove( 'active' );
    } );
    tabNav.childNodes[ tabIndex ].querySelector('a').classList.add( 'active' );
    tabPaneContainer.querySelectorAll( '.task-tabs-content > .tab-pane.show.active' ).forEach( function (el) {
        el.classList.remove( 'show', 'active' );
    } );
    tabPaneContainer.childNodes[ tabIndex ].classList.add( 'show', 'active' );
}

document.addEventListener('DOMContentLoaded', function ( event ) {
    document.querySelectorAll( '.grow-wrap textarea' ).forEach( function (el) {
        // This causes a slight blink when the DOM is loaded. It would
        // be nice if we could remove this and have the textarea start
        // the correct size for the content.
        el.parentNode.dataset.replicatedValue = el.value;
    } );
    delegateEvent( 'change', 'select.add-task', addTask );
    delegateEvent( 'click', 'button.task-remove', removeTask );
    delegateEvent( 'click', 'button.task-move-up', moveTaskUp );
    delegateEvent( 'click', 'button.task-move-down', moveTaskDown );
    delegateEvent( 'click', 'button.test-add', addTest );
    delegateEvent( 'click', 'button.test-remove', removeTest );
    delegateEvent( 'click', 'button.output-add', addOutput );
    delegateEvent( 'click', 'button.output-remove', removeOutput );
    delegateEvent( 'change', '*', checkZappExpressions );
    delegateEvent( 'click', '.task-tabs > .task-tabs-nav .nav-link', changeTaskTab );
    delegateEvent( 'change', 'select.add-input', addInput );
    delegateEvent( 'click', 'button.input-remove', removeInput );
});

% for my $js ( grep !!$_, map { data_section( $_, 'input.js.ep' ) } @{ stash 'tasks' } ) {
    %= include inline => $js
% }
% end
