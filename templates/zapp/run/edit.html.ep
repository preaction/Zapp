<%
    layout 'zapp';
    use Zapp::Util qw( prefix_field );
%>


<header>
    <h1>Run Plan: <%= $plan->{name} %></h1>
    %= link_to 'zapp.list_plans', class => 'btn btn-secondary', begin
        <i class="fa fa-arrow-left"></i> Back to Plans
    % end
</header>
<div style="white-space: pre-line" class="mb-3"><%= $plan->{description} %></div>

%= form_for 'zapp.create_run', enctype => 'multipart/form-data' => begin
    % if ( @{ $plan->{inputs} // [] } ) {
        <h2>Input</h2>
        % for my $input_num ( 0..$#{ $plan->{inputs} // [] } ) {
            % my $input = $plan->{inputs}[$input_num];
            <div class="form-group" data-input="<%= $input_num %>">
                <h4 data-input-name><%= $input->{name} =~ s/_/ /gr %></h4>
                %# These hidden fields will allow us to create runs for
                %# unsaved, ad-hoc plans
                %= hidden_field "input[$input_num].type", $input->{type}
                %= hidden_field "input[$input_num].name", $input->{name}
                <%
                    my $type_name = $input->{type};
                    my $type = $c->zapp->types->{ $type_name }
                        or die qq{Could not find type "$type_name"};
                    my $input_field = include inline => $type->input_field( $c, $input->{value} ), self => $type, input => $input;
                    my $input_dom = prefix_field( $input_field, "input[$input_num]" );
                    $input_dom->children->[0]->attr( 'aria-describedby', "input[$input_num].description" );
                %><%== $input_dom %>
                <small class="form-text" id="input[<%= $input_num %>].description">
                    %= $input->{description}
                </small>
            </div>
        % }
    % }
    <div class="buttons">
        <button class="btn btn-primary"><i class="fa fa-arrow-right"></i> Start</button>
    </div>
% end

